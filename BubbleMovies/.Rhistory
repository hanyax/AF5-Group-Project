layout(yaxis = list(title = 'Count'), barmode = 'group')
p
injured.vs.killed <- shootings.2016 %>%
group_by(state) %>%
filter(injured > 7) %>%
filter(killed > 3) %>%
select(state, city, injured, killed)
p <- plot_ly(injured.vs.killed, x = ~state, y = ~killed, type = 'bar', name = 'Killed') %>%
add_trace(y = ~injured, name = 'Injured') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
select(state, city, injured, killed)
injured.vs.killed <- shootings.2016 %>%
group_by(state) %>%
filter(injured > 7) %>%
filter(killed > 3) %>%
select(state, city, injured, killed)
p <- plot_ly(injured.vs.killed, x = ~state, y = ~killed, type = 'bar', name = 'Killed') %>%
add_trace(y = ~injured, name = 'Injured') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
p <- plot_ly(injured.vs.killed, x = ~state, y = ~killed, type = 'bar', name = 'Killed') %>%
add_trace(y = ~injured, name = 'Injured') %>%
layout(yaxis = list(title = 'Count'), xaxis = list(title = "States"), barmode = 'group')
p
plots <- plot_ly(injured.vs.killed, x = ~state, y = ~killed, type = 'bar', name = 'Killed') %>%
add_trace(y = ~injured, name = 'Injured') %>%
layout(yaxis = list(title = 'Count'), xaxis = list(title = "States in the US"), barmode = 'group')
injured.vs.killed <- shootings.2016 %>%
group_by(state) %>%
filter(injured > 7) %>%
filter(killed > 3) %>%
select(state, city, injured, killed)
plots <- plot_ly(injured.vs.killed, x = ~state, y = ~killed, type = 'bar', name = 'Killed') %>%
add_trace(y = ~injured, name = 'Injured') %>%
layout(yaxis = list(title = 'Count'), xaxis = list(title = "States in the US"), barmode = 'group')
injured.vs.killed <- shootings.2016 %>%
group_by(state) %>%
filter(injured > 7) %>%
filter(killed > 3) %>%
select(state, city, injured, killed)
plot.injured.killed <- plot_ly(injured.vs.killed, x = ~state, y = ~killed, type = 'bar', name = 'Killed') %>%
add_trace(y = ~injured, name = 'Injured') %>%
layout(yaxis = list(title = 'Count'), xaxis = list(title = "States in the US"), barmode = 'group')
plot.injured.killed
library("plotly")
library("ggplot2")
library("leaflet")
library("htmltools")
library("httr")
library("jsonlite")
library("dplyr")
library("knitr")
# read the file
shootings.2016 <- read.csv("data/shootings-2016.csv", stringsAsFactors = FALSE)
View(shootings.2016)
highest.no.lives.harmed <- highest.total.lost$total.loss[1]
highest.no.lives.harmed <- highest.total.lost$total.loss[1]
highest.no.lives.harmed
highest.no.state <- highest.total.lost$state[1]
highest.no.state
library("plotly")
library("shiny")
library("dyplr")
# find most genres based on the language selectted.
# find movies where the original_lang is en/hi/'
# popular movies of different langugages
# display the pictures in the background?
# calculate the genre ids
getMovies <- function(lang) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
ids <- as.character(info$genre_ids)
for (i in 1:ids) {
movies[info$title] <- list[[i]]
print(movies[info$title])
}
# print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
# View(data)
return (data)
}
# info$genre_ids
findMovieGenre <- function(genres) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- "https://api.themoviedb.org/3/genre/movie/list?"
# people <- findActorID(name)
# sort <- "popularity.desc"
query.params <- list(api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
# results <- flatten(genres$id)
print(results)
return (results)
}
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
# set X and Y axis variables
y <- list(
title = "Popularity Rating"
)
x <- list(
title = "Vote Average"
)
#info$genre_ids <- strsplit(nums)
if(input$lang == 'English') {
language <- "en"
} else if(input$lang == 'Hindi') {
language <- "hi"
} else if(input$lang == 'Italian') {
language <- "it"
} else if(input$lang == 'Japanese') {
language <- "ja"
} else if(input$lang == 'Greek') {
language <- 'el'
} else if(input$lang == 'French') {
language <- 'fr'
}
data <- getMovies(language)
for i in
if(input$genres == '28') {
data <- data %>% mutate(ids = filter())
}
'b' %in% v
# change the color to the range of last 5 years
plot_ly(data, x = ~data$info.vote_average, y = ~data$info.popularity, text = ~data$info.title, type = 'scatter', mode = 'markers', size = ~data$info.vote_count, color = ~data$info.release_date, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Popular Movies in a particular language and genres',
xaxis=x,
yaxis=y,
showlegend = FALSE)
})
})
#for i in 1:length(genres) {
#  list[[i]] <-
#}
getMovies <- function(lang) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
ids <- as.character(info$genre_ids)
for (i in 1:ids) {
movies[info$title] <- list[[i]]
print(movies[info$title])
}
# print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
# View(data)
return (data)
}
getMovies('en')
library("plotly")
library("shiny")
library("dyplr")
# find most genres based on the language selectted.
# find movies where the original_lang is en/hi/'
# popular movies of different langugages
# display the pictures in the background?
# calculate the genre ids
getMovies <- function(lang) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
ids <- as.character(info$genre_ids)
for (i in 1:ids) {
movies[info$title] <- list[[i]]
print(movies[info$title])
}
# print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
# View(data)
return (data)
}
# info$genre_ids
findMovieGenre <- function(genres) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- "https://api.themoviedb.org/3/genre/movie/list?"
# people <- findActorID(name)
# sort <- "popularity.desc"
query.params <- list(api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
# results <- flatten(genres$id)
print(results)
return (results)
}
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
# set X and Y axis variables
y <- list(
title = "Popularity Rating"
)
x <- list(
title = "Vote Average"
)
#info$genre_ids <- strsplit(nums)
if(input$lang == 'English') {
language <- "en"
} else if(input$lang == 'Hindi') {
language <- "hi"
} else if(input$lang == 'Italian') {
language <- "it"
} else if(input$lang == 'Japanese') {
language <- "ja"
} else if(input$lang == 'Greek') {
language <- 'el'
} else if(input$lang == 'French') {
language <- 'fr'
}
data <- getMovies(language)
for i in
if(input$genres == '28') {
data <- data %>% mutate(ids = filter())
}
'b' %in% v
# change the color to the range of last 5 years
plot_ly(data, x = ~data$info.vote_average, y = ~data$info.popularity, text = ~data$info.title, type = 'scatter', mode = 'markers', size = ~data$info.vote_count, color = ~data$info.release_date, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Popular Movies in a particular language and genres',
xaxis=x,
yaxis=y,
showlegend = FALSE)
})
})
#for i in 1:length(genres) {
#  list[[i]] <-
#}
library("plotly")
library("shiny")
library("dplyr")
# find most genres based on the language selectted.
# find movies where the original_lang is en/hi/'
# popular movies of different langugages
# display the pictures in the background?
# calculate the genre ids
getMovies <- function(lang) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
ids <- as.character(info$genre_ids)
for (i in 1:ids) {
movies[info$title] <- list[[i]]
print(movies[info$title])
}
# print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
# View(data)
return (data)
}
# info$genre_ids
findMovieGenre <- function(genres) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- "https://api.themoviedb.org/3/genre/movie/list?"
# people <- findActorID(name)
# sort <- "popularity.desc"
query.params <- list(api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
# results <- flatten(genres$id)
print(results)
return (results)
}
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
# set X and Y axis variables
y <- list(
title = "Popularity Rating"
)
x <- list(
title = "Vote Average"
)
#info$genre_ids <- strsplit(nums)
if(input$lang == 'English') {
language <- "en"
} else if(input$lang == 'Hindi') {
language <- "hi"
} else if(input$lang == 'Italian') {
language <- "it"
} else if(input$lang == 'Japanese') {
language <- "ja"
} else if(input$lang == 'Greek') {
language <- 'el'
} else if(input$lang == 'French') {
language <- 'fr'
}
data <- getMovies(language)
for i in
if(input$genres == '28') {
data <- data %>% mutate(ids = filter())
}
'b' %in% v
# change the color to the range of last 5 years
plot_ly(data, x = ~data$info.vote_average, y = ~data$info.popularity, text = ~data$info.title, type = 'scatter', mode = 'markers', size = ~data$info.vote_count, color = ~data$info.release_date, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Popular Movies in a particular language and genres',
xaxis=x,
yaxis=y,
showlegend = FALSE)
})
})
#for i in 1:length(genres) {
#  list[[i]] <-
#}
getMovies <- function(lang) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
ids <- as.character(info$genre_ids)
for (i in 1:ids) {
movies[info$title] <- list[[i]]
print(movies[info$title])
}
# print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
# View(data)
return (data)
}
getMovies('en')
getMovies <- function(lang) {
key <- "7a6c78ba5a3085b57bf936f116cd1259"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
ids <- as.character(info$genre_ids)
#for (i in 1:ids) {
#   movies[info$title] <- list[[i]]
#   print(movies[info$title])
# }
# print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
# View(data)
return (data)
}
getMovies('en')
runApp('Desktop/Spring2k17/INFO201/AF5-Group-Project/GenresPieChart')
runApp('Desktop/Spring2k17/INFO201/AF5-Group-Project/GenresPieChart')
setwd("~/Desktop/Spring2k17/INFO201/AF5-Group-Project/GenresPieChart")
runApp()
runApp()
library("plotly")
library("shiny")
# find most genres based on the language selectted.
# find movies where the original_lang is en/hi/'
# popular movies of different langugages
# display the pictures in the background?
# calculate the genre ids
getMovies <- function(lang) {
key <- "cc04f8a15efff3b286a9eb5a51308304"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
info$genre_ids <- as.character(info$genre_ids)
print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$genre_ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
View(data)
return (data)
}
findMovieGenre <- function(genres) {
key <- "cc04f8a15efff3b286a9eb5a51308304"
base <- "https://api.themoviedb.org/3/genre/movie/list?"
# people <- findActorID(name)
# sort <- "popularity.desc"
query.params <- list(api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
# results <- flatten(genres$id)
print(results)
return (results)
}
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
# set X and Y axis variables
y <- list(
title = "Popularity Rating"
)
x <- list(
title = "Vote Average"
)
#info$genre_ids <- strsplit(nums)
if(input$lang == 'English') {
language <- "en"
} else if(input$lang == 'Hindi') {
language <- "hi"
} else if(input$lang == 'Italian') {
language <- "it"
} else if(input$lang == 'Japanese') {
language <- "ja"
} else if(input$lang == 'Greek') {
language <- 'el'
} else if(input$lang == 'French') {
language <- 'fr'
}
data <- getMovies(language)
# change the color to the range of last 5 years
plot_ly(data, x = ~data$info.vote_average, y = ~data$info.popularity, text = ~data$info.title, type = 'scatter', mode = 'markers', size = ~data$info.vote_count, color = ~data$info.release_date, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Popular Movies in a particular language and genres',
xaxis=x,
yaxis=y,
showlegend = FALSE)
})
})
runApp()
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library("plotly")
library("shiny")
# find most genres based on the language selectted.
# find movies where the original_lang is en/hi/'
# popular movies of different langugages
# display the pictures in the background?
# calculate the genre ids
getMovies <- function(lang) {
key <- "cc04f8a15efff3b286a9eb5a51308304"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(with_original_language = lang, api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
info <- results$results
info$genre_ids <- as.character(info$genre_ids)
print(info$genre_ids)
data <- data.frame(info$title, info$release_date, info$vote_average, info$popularity, info$genre_ids, info$vote_count, info$original_language, stringsAsFactors = FALSE)
View(data)
return (data)
}
findMovieGenre <- function(genres) {
key <- "cc04f8a15efff3b286a9eb5a51308304"
base <- "https://api.themoviedb.org/3/genre/movie/list?"
# people <- findActorID(name)
# sort <- "popularity.desc"
query.params <- list(api_key = key)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
# results <- flatten(genres$id)
print(results)
return (results)
}
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
# set X and Y axis variables
y <- list(
title = "Popularity Rating"
)
x <- list(
title = "Vote Average"
)
#info$genre_ids <- strsplit(nums)
if(input$lang == 'English') {
language <- "en"
} else if(input$lang == 'Hindi') {
language <- "hi"
} else if(input$lang == 'Italian') {
language <- "it"
} else if(input$lang == 'Japanese') {
language <- "ja"
} else if(input$lang == 'Greek') {
language <- 'el'
} else if(input$lang == 'French') {
language <- 'fr'
}
data <- getMovies(language)
# change the color to the range of last 5 years
plot_ly(data, x = ~data$info.vote_average, y = ~data$info.popularity, text = ~data$info.title, type = 'scatter', mode = 'markers', size = ~data$info.vote_count, color = ~data$info.release_date, colors = 'Paired',
marker = list(opacity = 0.5, sizemode = 'diameter')) %>%
layout(title = 'Popular Movies in a particular language and genres',
xaxis=x,
yaxis=y,
showlegend = FALSE)
})
})
runApp()
runApp()
help.search("GET")
runApp()
runApp()
