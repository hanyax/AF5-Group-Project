q()
q()
q()
install.packages("stringer")
CompareLengths(a,b)
CompareLengths(a,b)
CompareLength(a,b)
N <- length(a) - length(b)
paste0("The difference in lengths is ",N)
CompareLength <- function (a, b) {
N <- (length(a) - length(b))
return(paste0("The difference in lengths is ",N))
}
CompareLength(a, b)
# Exercise 2: writing and executing functions (II)
# Write a function `CompareLength` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
CompareLength <- function (a, b) {
N <- (length(a) - length(b))
return(paste0("The difference in lengths is ", N))
}
# Pass two vectors of different length to your `CompareLength` function
a <- c(1, 4, 7)
b <- c(2, 6)
CompareLength(a, b)
# Write a function `DescribeDifference` that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
#DescribeDifference <- function(a,b) {
#}
# Pass two vectors to your `DescribeDifference` function
### Bonus ###
# Rewrite your `DescribeDifference` function to tell you the name of the vector which is longer
source('C:/Users/matt/Desktop/m7-functions/exercise-2/exercise.R', echo=TRUE)
# Exercise 2: writing and executing functions (II)
# Write a function `CompareLength` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
CompareLength <- function (a, b) {
N <- (length(a) - length(b))
return(paste0("The difference in lengths is ", N))
}
# Pass two vectors of different length to your `CompareLength` function
a <- c(1, 4, 7)
b <- c(2, 6)
CompareLength(a, b)
# Write a function `DescribeDifference` that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
#DescribeDifference <- function(a,b) {
#}
# Pass two vectors to your `DescribeDifference` function
### Bonus ###
# Rewrite your `DescribeDifference` function to tell you the name of the vector which is longer
# Exercise 2: writing and executing functions (II)
# Write a function `CompareLength` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
CompareLength <- function (a, b) {
N <- (length(a) - length(b))
return(paste0("The difference in lengths is ", N))
}
# Pass two vectors of different length to your `CompareLength` function
a <- c(1, 4, 7)
b <- c(2, 6)
CompareLength(a, b)
# Write a function `DescribeDifference` that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
DescribeDifference <- function(a,b) {
if (length(a) > length(b)) {
N <- (length(a) - length(b))
return(paste0("Your first vector is longer by ", N, " elements"))
} else if (length(a) < length) {
N <- (length(b) - length(a))
return(paste0("Your second vector is longer by ", N, " elements"))
}
N <- (length(a) - length(b))
}
# Pass two vectors to your `DescribeDifference` function
DescribeDifference(a, b)
### Bonus ###
# Rewrite your `DescribeDifference` function to tell you the name of the vector which is longer
install.packages("stringr")
library("stringr")
my.age <- 22
my.age
minutes.in.a.day <- 60 * 24
hours.in.a.year <- 24 * 365
if (minutes.in.a.day > hours.in.a.year) {
more.minutes.than.hours <- TRUE
} else {
more.minutes.than.hours <- FALSE
}
more.minutes.than.hours
MakeIntroduction <- function(name, age) {
return(paste0("Hello, my name is ", name, ", and I'm ", age, " years old."))
}
my.name <- "Zach"
MakeIntroduction(my.age, my.name)
MakeIntroduction(my.name, my.age)
my.intro <- MakeIntroduction(my.name, my.age)
my.intro
casual.intro <- gsub("Hello, my name is ", "Hey, I'm ", my.intro)
casual.intro
loud.intro <- toupper(my.intro
loud.intro <- toupper(my.intro)
loud.intro
loud.intro <- toupper(my.intro)
loud.intro
quiet.intro <- tolower(my.intro)
quiet.intro
capitalized <- str_to_title(my.intro)
capitalized
occurences <- str_count(my.into, "e")
occurences <- str_count(my.intro, "e")
occurences
Double <- function(num) {
return(num * 2)
}
Double(4)
minutes.in.two.days <- Double(minutes.in.a.day)
minutes.in.two.days
ThirdPower <- function(num) {
return(num * num * num)
}
ThirdPower(2)
twenty.seven <- ThirdPower(3)
twenty.seven
movies <- C("Drive", "I, Robot", "Fight Club", "The Town", "The Talented Mr. Ripley", "Inception")
movies <- c("Drive", "I, Robot", "Fight Club", "The Town", "The Talented Mr. Ripley", "Inception")
movies
movies[2]
top.three <- head(movies, 3)
top.three
excited <- paste(movies, "is a great movie!")
excited
without.four <- c(movies[1:3], movies[5:6])
without.four
numbers <- seq(700, 999, 1)
numbers
len <- length(numbers)
len
numbers.mean <- mean(numbers)
numbers.mean
numbers.median <- median(numbers)
numbers.median
lower.numbers <- seq(500, 699, 1)
lower.numbers
all.numbers <- c(lower.numbers, numbers)
all.numbers
today <- as.Date(Sys.Date())
today
summer.break <- as.Date(June 9, 2017)
summer.break <- as.Date("June 9, 2017")
summer.break <- as.Date("2017-6-9")
summer.break
days.to.break <- summer.break - today
days.to.break
MakeBirthdayIntro <- function(name, age, bday.string) {
return(paste0(MakeIntroduction(name, age), " In ", as.Date(bday.string) - as.Date(Sys.Date()), " days I'll be ", age + 1))
}
MakeBirthdayIntro("zach", 22, "1994-09-19")
MakeBirthdayIntro <- function(name, age, bday.string) {
return(paste0(MakeIntroduction(name, age), " In ", as.Date(bday.string) - as.Date(Sys.Date()) + (age * 365), " days I'll be ", age + 1))
}
MakeBirthdayIntro <- function(name, age, bday.string) {
return(paste0(MakeIntroduction(name, age), " In ", as.Date(bday.string) - as.Date(Sys.Date()) + (age * 365), " days I'll be ", age + 1))
}
MakeBirthdayIntro("zach", 22, "1994-09-19")
MakeBirthdayIntro <- function(name, age, bday.string) {
return(paste0(MakeIntroduction(name, age), " In ", as.Date(Sys.Date()) - as.Date(bday.string) + (age * 365), " days I'll be ", age + 1))
}
MakeBirthdayIntro("zach", 22, "1994-09-19")
MakeBirthdayIntro <- function(name, age, bday.string) {
return(paste0(MakeIntroduction(name, age), " In ", as.Date(Sys.Date()) - as.Date(bday.string) - (age * 365), " days I'll be ", age + 1))
}
MakeBirthdayIntro("zach", 22, "1994-09-19")
my.bday.intro <- MakeBirthdayIntro("zach", 22, "1994-09-19")
my.bday.intro
RemoveDigits <- function(string) {
return(gsub("[0-9]+", "", string))
}
RemoveDigits("alkdjfakj7alkdjfa")
RemoveDigits(c("INFO 480", "MATH 125", "HIS 420"))
data("USPersonalExpenditure")
is.data.frame("USPersonalExpenditure")
data.frame("USPersonalExpenditure")
data.frame.USPE <- ("USPersonalExpenditure")
colnames(data.frame.USPE)
data(USPersonalExpenditure)
# The variable USPersonalExpenditure is now accessible to you. Unfortunately, it's not a data.frame
# Test this using the is.data.frame function
is.data.frame(USPersonalExpenditure)
# Luckily, you can simply pass the USPersonalExpenditure variable to the data.frame function
# to convert it a data.farme
data.frame(USPersonalExpenditure)
# Create a new variable by passing the USPersonalExpenditure to the data.frame function
data.frame.USPE <- (USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(data.frame.USPE)
rownames(data.frame.USPE)
grants <- read.csv("c/Users/matt/desktop/m10-dataframes/exercise-4/data/gates_money.csv")
grants <- read.csv("./data/gates_money.csv")
grants <- read.csv("./Users/matt/Desktop/m10-dataframes/exercise-4/data
/gates_money.csv")
grants <- read.csv("./Users/matt/Desktop/m10-dataframes/exercise-4/data/gates_money.csv")
grants <- read.csv("/Users/matt/Desktop/m10-dataframes/exercise-4/data/gates_money.csv")
View(grants)
getwd()
spending <- colSums(total_amount)
spending <- sum(grants$total_amount)
spending
is.vector(spending)
org <- grants$organization
org
mean.grant.value <- mean(grants$total_amount)
mean.grant.value
max.grant <- max(grants$total_amount)
max.grant
min.grant <- min(grants$total_amount)
min.grant
committees.w.legs <- committees %>%
group_by(ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "ID") %>%
arrange(count.x)
library(dplyr)
library(httr)
library(jsonlite)
committees.w.legs <- committees %>%
group_by(ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "ID") %>%
arrange(count.x)
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
library(jsonlite)
library(httr)
library(dplyr)
base.url <- "http://congress.api.sunlightfoundation.com"
# district
my.district <- GET("https://congress.api.sunlightfoundation.com/districts/locate?zip=98105")
my.district.extract <- content(my.district, "text")
list.convert <- fromJSON(my.district.extract)
#legislators
legislators.Json <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=98105")
legislators.extract <- content(legislators.Json, "text")
legislators.convert <- fromJSON(legislators.extract)
View(legislators.convert)
legislators.convert <- legislators.convert %>%
data.frame()
legislator.data.for.table <- legislators.convert %>%
select(results.first_name, results.last_name, results.title, results.party, results.chamber, results.phone, results.website, results.twitter_id)
colnames(legislator.data.for.table)[1] <- "First Name"
colnames(legislator.data.for.table)[2] <- "Last Name"
colnames(legislator.data.for.table)[3] <- "Title"
colnames(legislator.data.for.table)[4] <- "Party"
colnames(legislator.data.for.table)[5] <- "Chamber"
colnames(legislator.data.for.table)[6] <- "Phone"
colnames(legislator.data.for.table)[7] <- "Website"
colnames(legislator.data.for.table)[8] <- "Twitter"
legislator.data.for.table$Website <- paste0("[link](", legislator.data.for.table$Website, ")")
legislator.data.for.table$Twitter <- paste0("[link](", "https://twitter.com/", legislator.data.for.table$Twitter, ")")
kable(legislator.data.for.table)
# Committee information
CommitteesServedOn <- function(ID) {
legislator.info <- GET(paste0("https://congress.api.sunlightfoundation.com/committees?member_ids=", ID))
committees.extracted <- content(legislator.info, "text")
committees.convert <- fromJSON(committees.extracted)
committees.convert <- committees.convert %>%
data.frame() %>%
mutate(ID = ID) %>%
flatten
return(committees.convert)
}
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
IDs <- legislators.convert$results.bioguide_id
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
committees.w.legs <- committees %>%
group_by(ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "ID") %>%
arrange(count.x)
CommitteesServedOn <- function(ID) {
legislator.info <- GET(paste0("https://congress.api.sunlightfoundation.com/committees?member_ids=", ID))
committees.extracted <- content(legislator.info, "text")
committees.convert <- fromJSON(committees.extracted)
committees.convert <- committees.convert %>%
data.frame() %>%
mutate(bio_ID = ID) %>%
flatten
return(committees.convert)
}
IDs <- legislators.convert$results.bioguide_id
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
View(committees)
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
View(committees)
committees.w.legs <- committees %>%
group_by(bio_ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "ID") %>%
arrange(count.x)
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
View(committees)
committees.w.legs <- committees %>%
group_by(bio_ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "bio_ID") %>%
arrange(count.x)
CommitteesServedOn <- function(ID) {
legislator.info <- GET(paste0("https://congress.api.sunlightfoundation.com/committees?member_ids=", ID))
committees.extracted <- content(legislator.info, "text")
committees.convert <- fromJSON(committees.extracted)
committees.convert <- committees.convert %>%
data.frame() %>%
mutate(results.bioguide_id = ID) %>%
flatten
return(committees.convert)
}
IDs <- legislators.convert$results.bioguide_id
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
committees.w.legs <- committees %>%
group_by(bio_ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "bio_ID") %>%
arrange(count.x)
committees.w.legs <- committees %>%
group_by(bio_ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(count.x)
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(count.x)
View(committees.w.legs)
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(desc(count.x))
View(committees.w.legs)
barplot(legislator.plot, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name))
barplot(legislator.plot, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name)
legislator.plot <- table(committees.w.legs$count.x)
barplot(legislator.plot, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name)
legislator.plot
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
View(committees)
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(desc(count.x))
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(desc(count.x))
View(committees.w.legs)
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name)
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Maria Cantwell", "Patty Murray", "Pramila Jayapal"))
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(count.x) ##%>%
View(committees.w.legs)
legislator.plot <- table(committees.w.legs$count.x)
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Maria Cantwell", "Patty Murray", "Pramila Jayapal"))
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
par(mar=c(4,8,8,2))
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"), las = 1)
my.committee <- CommitteesServedOn("M001111") %>%
filter(results.committee_id = "SSVA")
my.committee <- CommitteesServedOn("M001111") %>%
filter(results.committee_id == "SSVA")
my.committee
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
members.SSVA
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame %>%
flatten
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids&per_page=all")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame %>%
flatten
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame %>%
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA <- fromJSON(content(members.SSVA.raw, "text"))$results$memnbers[[1]] %>% flatten
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA <- fromJSON(content(members.SSVA.raw, "text"))$results$members[[1]] %>% flatten
members.SSVA
View(members.SSVA)
chair <- members.SSVA %>%
filter(title == "Chairman" || title == "Chairwoman") %>%
select(legislator.first_name, legislator.last_name)
chair
chair <- members.SSVA %>%
filter(title == "Chairman") %>%
select(legislator.first_name, legislator.last_name)
chair
people.on.committee <- nrow(members.SSVA)
people.on.committee
my.rep.ID <- "M001111"
my.rep.side <- members.SSVA %>%
filter(legislator.bioguide_id == my.rep.ID) %>%
select(side)
my.rep.side
m.number <- nrow(members.SSVA %>%
filter(legislator.gender == "M"))
m.number
f.number <- nrow(members.SSVA %>%
filter(legislator.gender == "F"))
f.percent <- 100 * (round(f.number / people.on.committee, digits = 0))
f.percent
f.percent <- 100 * (round(f.number / people.on.committee, digits = 2))
f.percent
m.percent <- 100 * (round(m.number / people.on.committee, digits = 2))
m.percent
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(httr)
library(dplyr)
base.url <- "http://congress.api.sunlightfoundation.com"
# district
my.district <- GET("https://congress.api.sunlightfoundation.com/districts/locate?zip=98105")
my.district.extract <- content(my.district, "text")
list.convert <- fromJSON(my.district.extract)
#legislators
legislators.Json <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=98105")
legislators.extract <- content(legislators.Json, "text")
legislators.convert <- fromJSON(legislators.extract)
legislators.convert <- legislators.convert %>%
data.frame()
legislator.data.for.table <- legislators.convert %>%
select(results.first_name, results.last_name, results.title, results.party, results.chamber, results.phone, results.website, results.twitter_id)
colnames(legislator.data.for.table)[1] <- "First Name"
colnames(legislator.data.for.table)[2] <- "Last Name"
colnames(legislator.data.for.table)[3] <- "Title"
colnames(legislator.data.for.table)[4] <- "Party"
colnames(legislator.data.for.table)[5] <- "Chamber"
colnames(legislator.data.for.table)[6] <- "Phone"
colnames(legislator.data.for.table)[7] <- "Website"
colnames(legislator.data.for.table)[8] <- "Twitter"
legislator.data.for.table$Website <- paste0("[link](", legislator.data.for.table$Website, ")")
legislator.data.for.table$Twitter <- paste0("[link](", "https://twitter.com/", legislator.data.for.table$Twitter, ")")
kable(legislator.data.for.table)
setwd("C:/Users/matt/Desktop/AF5-Group-Project")
setwd("C:/Users/matt/Desktop/AF5-Group-Project/InternationalMoviesMap")
