}
IDs <- legislators.convert$results.bioguide_id
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
committees.w.legs <- committees %>%
group_by(bio_ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "bio_ID") %>%
arrange(count.x)
committees.w.legs <- committees %>%
group_by(bio_ID) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(count.x)
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(count.x)
View(committees.w.legs)
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(desc(count.x))
View(committees.w.legs)
barplot(legislator.plot, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name))
barplot(legislator.plot, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name)
legislator.plot <- table(committees.w.legs$count.x)
barplot(legislator.plot, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name)
legislator.plot
committees <- bind_rows(lapply(IDs, CommitteesServedOn))
View(committees)
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(desc(count.x))
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(desc(count.x))
View(committees.w.legs)
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committees$results.name)
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Maria Cantwell", "Patty Murray", "Pramila Jayapal"))
committees.w.legs <- committees %>%
group_by(results.bioguide_id) %>%
summarise(count = n()) %>%
left_join(legislators.convert, committees, by = "results.bioguide_id") %>%
arrange(count.x) ##%>%
View(committees.w.legs)
legislator.plot <- table(committees.w.legs$count.x)
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Maria Cantwell", "Patty Murray", "Pramila Jayapal"))
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
par(mar=c(4,8,8,2))
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
barplot(committees.w.legs$count.x, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"), las = 1)
my.committee <- CommitteesServedOn("M001111") %>%
filter(results.committee_id = "SSVA")
my.committee <- CommitteesServedOn("M001111") %>%
filter(results.committee_id == "SSVA")
my.committee
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
members.SSVA
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame %>%
flatten
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members_ids&per_page=all")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame %>%
flatten
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame %>%
View(members.SSVA)
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA.JSON <- content(members.SSVA.raw, "text")
members.SSVA <- fromJSON(members.SSVA.JSON)
members.SSVA <- members.SSVA %>%
data.frame
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA <- fromJSON(content(members.SSVA.raw, "text"))$results$memnbers[[1]] %>% flatten
members.SSVA.raw <- GET("https://congress.api.sunlightfoundation.com/committees?committee_id=SSVA&fields=members&per_page=all")
members.SSVA <- fromJSON(content(members.SSVA.raw, "text"))$results$members[[1]] %>% flatten
members.SSVA
View(members.SSVA)
chair <- members.SSVA %>%
filter(title == "Chairman" || title == "Chairwoman") %>%
select(legislator.first_name, legislator.last_name)
chair
chair <- members.SSVA %>%
filter(title == "Chairman") %>%
select(legislator.first_name, legislator.last_name)
chair
people.on.committee <- nrow(members.SSVA)
people.on.committee
my.rep.ID <- "M001111"
my.rep.side <- members.SSVA %>%
filter(legislator.bioguide_id == my.rep.ID) %>%
select(side)
my.rep.side
m.number <- nrow(members.SSVA %>%
filter(legislator.gender == "M"))
m.number
f.number <- nrow(members.SSVA %>%
filter(legislator.gender == "F"))
f.percent <- 100 * (round(f.number / people.on.committee, digits = 0))
f.percent
f.percent <- 100 * (round(f.number / people.on.committee, digits = 2))
f.percent
m.percent <- 100 * (round(m.number / people.on.committee, digits = 2))
m.percent
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(httr)
library(dplyr)
base.url <- "http://congress.api.sunlightfoundation.com"
# district
my.district <- GET("https://congress.api.sunlightfoundation.com/districts/locate?zip=98105")
my.district.extract <- content(my.district, "text")
list.convert <- fromJSON(my.district.extract)
#legislators
legislators.Json <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=98105")
legislators.extract <- content(legislators.Json, "text")
legislators.convert <- fromJSON(legislators.extract)
legislators.convert <- legislators.convert %>%
data.frame()
legislator.data.for.table <- legislators.convert %>%
select(results.first_name, results.last_name, results.title, results.party, results.chamber, results.phone, results.website, results.twitter_id)
colnames(legislator.data.for.table)[1] <- "First Name"
colnames(legislator.data.for.table)[2] <- "Last Name"
colnames(legislator.data.for.table)[3] <- "Title"
colnames(legislator.data.for.table)[4] <- "Party"
colnames(legislator.data.for.table)[5] <- "Chamber"
colnames(legislator.data.for.table)[6] <- "Phone"
colnames(legislator.data.for.table)[7] <- "Website"
colnames(legislator.data.for.table)[8] <- "Twitter"
legislator.data.for.table$Website <- paste0("[link](", legislator.data.for.table$Website, ")")
legislator.data.for.table$Twitter <- paste0("[link](", "https://twitter.com/", legislator.data.for.table$Twitter, ")")
kable(legislator.data.for.table)
getActorID <- function(name) {
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
results <- flatten(results$results)
return (toString(results$id[1]))
}
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
library(jsonlite)
library("httr")
# api key is cc04f8a15efff3b286a9eb5a51308304
key <- "cc04f8a15efff3b286a9eb5a513083044"
base.api <- "https://api.themoviedb.org/3/person/"
list <- api_key = key, query=""
ryan.g <- GET()
getActorID <- function(name) {
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
results <- flatten(results$results)
return (toString(results$id[1]))
}
getActorID("Ryan Gosling")
getActorID("Ryan Gosling")
getActorID("Ryan Gosling")
getActorID <- function(name) {
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(base.api = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
results <- flatten(results$results)
return (toString(results$id[1]))
}
getActorID("Ryan Gosling")
getActorID <- function(name) {
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
results <- flatten(results$results)
return (toString(results$id[1]))
}
getActorID("Ryan Gosling")
getActorID <- function(name) {
key <- "cc04f8a15efff3b286a9eb5a513083044"
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
results <- flatten(results$results)
return (toString(results$id[1]))
}
getActorID("Ryan Gosling")
getActorID <- function(name) {
key <- "cc04f8a15efff3b286a9eb5a513083044"
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
#results <- fromJSON(body)
#results <- flatten(results$results)
#return (toString(results$id[1]))
View(body)
}
getActorID("Ryan Gosling")
getActorID <- function(name) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
#results <- fromJSON(body)
#results <- flatten(results$results)
#return (toString(results$id[1]))
View(body)
}
getActorID("Ryan Gosling")
getActorID <- function(name) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- "https://api.themoviedb.org/3/search/person?"
query.params <- list(api_key = key, query=name)
response <- GET(base, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
results <- flatten(results$results)
return (toString(results$id[1]))
#View(body)
}
getActorID("Ryan Gosling")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- "https://api.themoviedb.org/3/person/"
query.params <- list(api_key = key, query=id)
response <- GET(base, query = query.params)
View(response)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/person/",id)
query.params <- list(api_key = key)
response <- GET(base, query = query.params)
View(response)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
View(response)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
results <- fromJSON(response)
View(results)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
View(results)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
dates <- results$results.release_date
View(dates)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
dates <- results$release_date
View(dates)
}
getActorMovies("30614")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
dates <- results$release_date
View(dates)
}
getActorMovies("30614")
getActorTVShows <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/tv?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
getActorID("Jon Hamm")
getActorTVShows("65717")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
getActorMovies("65717")
setwd("C:/Users/matt/Desktop/a8-building-apps-zachh20/a8")
setwd("C:/Users/matt/Desktop/AF5-Group-Project/InternationalMoviesMap")
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
id <- getActorID(input)
movies <- getActorMovies(id)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines')
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines')
p
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id, sort_by = release_date.asc)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines')
p
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id, sort_by = release_date.asc)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
View(movies)
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id, sort_by = "release_date.asc")
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
View(movies)
id <- getActorID("Nicolas Cage")
movies <- getActorMovies(id)
View(movies)
query.params <- list(api_key = key, with_cast = id, sort_by = "release_date.desc")
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id, sort_by = "release_date.desc")
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
id <- getActorID("Nicolas Cage")
movies <- getActorMovies(id)
View(movies)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines')
p
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
View(movies)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines')
p
getActorMovies <- function(id) {
key <- "07c7b544cd225d44012fadeac87086aa"
base <- paste0("https://api.themoviedb.org/3/discover/movie?")
query.params <- list(api_key = key, with_cast = id, sort_by = "release_date.desc", vote_count.gte = 100)
response <- GET(base, query = query.params)
text <- content(response, "text")
results <- fromJSON(text)
results <- flatten(results$results)
return(results)
}
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
View(movies)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines')
p
runApp('tester')
runApp('tester')
id <- getActorID("Jon Hamm")
movies <- getActorMovies(id)
View(movies)
trace <- rnorm(100, mean = 5)
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines+markers')
p
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
p <- plot_ly(movies, x= ~movies$release_date, y = ~movies$vote_average, type = 'scatter', mode = 'lines+markers', text = movies$original_title) %>%
layout(title = paste0("Not valid Name so back to Emma"),
yaxis = y.axis,
xaxis = x.axis
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('tester')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
install.packages("wordcloud")
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
runApp('C:/Users/matt/Desktop/AF5-Group-Project')
